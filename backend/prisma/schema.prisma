// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ImportCSV {
  id           String   @id @default(uuid())
  email        String
  mobileNumber String
  courseName   String[]

  @@unique([email, mobileNumber])
}

model User {
  userId       String   @id @default(uuid())
  firstName    String
  lastName     String
  email        String   @unique
  mobileNumber String
  username     String   @unique
  password     String
  courseName   String[]
  about        String
  role         String   @default("user")
  isTeamLeader Boolean  @default(false)
  isActive     Boolean  @default(true)
  twitter      String?
  github       String?
  linkedIn     String?
  hashnode     String?
  peerlist     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  designation    Designation?
  tags           Tag[]            @relation("UserTags")
  teamLeaderOf   Teams[]          @relation("TeamLeader")
  teams          Teams[]          @relation("teamMembers")
  ActiveRequests ActiveInvitationOrRequest[]
  TeamsEditLog   TeamsEditLog[]
  userRoleInTeam UserRoleInTeam[]
  chats          Chat[]           @relation("ChatMembers")
  messages       Message[]
  noticeRequests NoticeRequest[]
  notices        Notice[]         @relation("UserNotices")
  noticeHistory  NoticeHistory[]
}

enum Designation {
  FULLSTACK_DEVELOPER
  FRONTEND_DEVELOPER
  BACKEND_DEVELOPER
  UI_DESIGNER
  UX_DESIGNER
  PRODUCT_DESIGNER
  DATA_SCIENTIST
  DATA_ANALYST
  DATA_ENGINEER
  DATABASE_DESIGNER
  TEAM_LEADER
}

model Teams {
  id           String   @id @default(uuid())
  uniqueTitle  String   @unique
  title        String
  about        String
  teamLeaderId String
  isActive     Boolean  @default(true)
  link         Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teamLeader     User             @relation("TeamLeader", fields: [teamLeaderId], references: [userId])
  members        User[]           @relation("teamMembers")
  tags           Tag[]            @relation("TeamTags")
  logs           TeamsEditLog[]   @relation("teamLogs")
  userRoleInTeam UserRoleInTeam[]
  ActiveRequests ActiveInvitationOrRequest[]
  chats          Chat[]
  notices        Notice[]
  noticeRequests NoticeRequest[]
  
}

model UserRoleInTeam {
  id          String      @id @default(uuid())
  userId      String
  teamId      String
  designation Designation
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User  @relation(fields: [userId], references: [userId])
  team Teams @relation(fields: [teamId], references: [id])
}

model Tag {
  id   String @id @default(uuid())
  name String @unique

  teams Teams[] @relation("TeamTags")
  users User[]  @relation("UserTags")
}

enum Action {
  INVITATION_SENT
  INVITATION_REVOKED
  INVITATION_EXPIRED
  INVITATION_REJECTED
  INVITATION_ACCEPTED
  ROLE_ASIGNED
  ROLE_REMOVED
  TEAM_CREATED
  TEAM_DELETED
  MEMBER_REMOVED
  LEAVED_TEAM
  JOINING_REQUEST_RECEIVED
  JOINING_REQUEST_REVOKED
  JOINING_REQUEST_REJECTED
  JOINING_REQUEST_ACCEPTED

}

// store id of request or invitation in TeamEditLog in requestId field
model TeamsEditLog {
  id          String      @id @default(uuid())
  requestId   String?
  teamId      String
  userId      String
  action      Action
  designation Designation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  team Teams @relation(fields: [teamId], references: [id], name: "teamLogs")
  user User  @relation(fields: [userId], references: [userId])
}

model ActiveInvitationOrRequest {
  id        String   @id @default(uuid())
  teamId    String
  memberId  String
  designation Designation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team   Teams @relation(fields: [teamId], references: [id])
  member User  @relation(fields: [memberId], references: [userId])

  @@unique([teamId, memberId, designation])
}

model Notice {
  id         String   @id @default(uuid())
  title      String
  content    String
  postedById String
  teamId     String
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  postedBy User            @relation("UserNotices", fields: [postedById], references: [userId])
  team     Teams           @relation(fields: [teamId], references: [id])
  history  NoticeHistory[]
}

model NoticeRequest {
  id             String   @id @default(uuid())
  memberId       String
  teamId         String
  requestMessage String
  status         String   @default("pending") // pending, approved, rejected
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  member User  @relation(fields: [memberId], references: [userId])
  team   Teams @relation(fields: [teamId], references: [id])
}

model NoticeHistory {
  id            String   @id @default(uuid())
  noticeId      String
  action        String // "approved", "rejected", "updated"
  performedById String
  createdAt     DateTime @default(now())

  notice      Notice @relation(fields: [noticeId], references: [id])
  performedBy User   @relation(fields: [performedById], references: [userId])
}

model Chat {
  id       String  @id @default(uuid())
  title    String
  about    String
  teamId   String
  isActive Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team     Teams     @relation(fields: [teamId], references: [id])
  messages Message[]
  members  User[]    @relation("ChatMembers")
}

model Message {
  id      String @id @default(uuid())
  userId  String
  chatId  String
  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [userId])
  chat Chat @relation(fields: [chatId], references: [id])
}
